import os
import sys
from pathlib import Path
import pytest
from httpx import AsyncClient
import anyio

base_path = Path(__file__).parent.parent
sys.path.insert(0, str(base_path / "app"))

os.environ["ENVIRONMENT"] = "uat"

@pytest.mark.asyncio
async def test_get_status(async_client: AsyncClient):
    async with anyio.create_task_group() as tg:
        response = await async_client.get("/mesh/get_status")
        assert response.status_code == 200
        data = response.json()
        assert all(key in data["status"] for key in ["application", "host", "pid"])
    
    # Force cleanup
    await anyio.sleep(0)  # Allow task group to exit

@pytest.mark.asyncio
async def test_update_map(async_client: AsyncClient, mocker):
    mock_result = {"message": "Enrichment maps updated successfully"}
    mocker.patch(
        "app.main.auto_enrichment_obj.update_maps",
        new=AsyncMock(return_value=mock_result)
    )
    
    response = await async_client.get("/update-map/appid_to_1")
    assert response.status_code == 200
    assert response.json() == mock_result

    # Explicit mock cleanup
    mocker.resetall()