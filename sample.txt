import pytest

def test_write_kafka_log_entry_with_monkeypatch(monkeypatch):
    # Create lists to record calls to our dummy implementations
    log_entry_calls = []
    logger_log_calls = []

    # Create a dummy Log_entry class to record instantiation and simulate behavior.
    class DummyLogEntry:
        # Simulate the severity conversion dictionary
        severity_conversion = {1: "INFO"}
        
        def __init__(self, message, level, catalog, error_number, message_vars, extra):
            log_entry_calls.append({
                "message": message,
                "level": level,
                "catalog": catalog,
                "error_number": error_number,
                "message_vars": message_vars,
                "extra": extra
            })
            
        def get_log_message_json(self):
            # Return a dummy JSON string
            return '{"dummy": "json"}'
    
    # Replace the Log_entry used in logger.py with DummyLogEntry.
    # (Note: the first argument here must be the module path where write_kafka_log_entry uses it.)
    monkeypatch.setattr("logger.Log_entry", DummyLogEntry)
    
    # Replace the logger.log function in logger.py with a dummy function that records its calls.
    def dummy_log(level, message):
        logger_log_calls.append((level, message))
    
    monkeypatch.setattr("logger.logger.log", dummy_log)
    
    # Import the function after monkeypatching so it uses the replaced objects.
    from logger import write_kafka_log_entry
    
    # Call the function to trigger our dummy implementations.
    write_kafka_log_entry("Test message", level=1, error_number=1234)
    
    # Now we can use normal assertions on our recorded call data.
    
    # Check that a Log_entry was created with the expected parameters.
    assert len(log_entry_calls) == 1, f"Expected one Log_entry instantiation, got {len(log_entry_calls)}"
    call = log_entry_calls[0]
    assert call["message"] == "Test message"
    assert call["level"] == 1
    assert call["catalog"] == "bpan-autoenrichmentmaps"
    assert call["error_number"] == "1234"  # Note: error_number is converted to a string
    assert call["message_vars"] == ("Test message",)
    assert call["extra"] == {"component": "emap-auto-enrichment-maps"}
    
    # Check that logger.log was called with the converted level and expected JSON output.
    assert len(logger_log_calls) == 1, f"Expected one logger.log call, got {len(logger_log_calls)}"
    logged_level, logged_message = logger_log_calls[0]
    assert logged_level == "INFO"
    assert logged_message == '{"dummy": "json"}'