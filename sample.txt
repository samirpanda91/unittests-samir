# tests/test_main.py
import os
import sys
import asyncio
from pathlib import Path
import pytest
from httpx import AsyncClient
from anyio import create_task_group, CancelScope

# Fix import paths
base_path = Path(__file__).parent.parent
sys.path.insert(0, str(base_path / "app"))

from app.main import app  # Import after path fix

os.environ["ENVIRONMENT"] = "uat"

@pytest.fixture(scope="module")
def event_loop():
    """Event loop fixture for module-level async tests"""
    policy = asyncio.WindowsSelectorEventLoopPolicy() if os.name == 'nt' else asyncio.DefaultEventLoopPolicy()
    loop = policy.new_event_loop()
    asyncio.set_event_loop(loop)
    yield loop
    loop.close()

@pytest.fixture(scope="module")
async def async_client():
    """Self-contained async client with explicit cleanup"""
    # Start app
    await app.router.startup()
    
    # Client setup
    client = AsyncClient(app=app, base_url="http://test")
    yield client
    
    # Cleanup
    await client.aclose()
    await app.router.shutdown()
    await asyncio.sleep(0)  # Allow pending tasks to complete

@pytest.mark.asyncio
async def test_get_status(async_client):
    """Test with built-in timeout"""
    with CancelScope() as scope:
        scope.deadline = 5  # 5-second timeout
        async with create_task_group() as tg:
            response = await async_client.get("/mesh/get_status")
            assert response.status_code == 200
            data = response.json()
            assert all(key in data["status"] for key in ["application", "host", "pid"])
            tg.cancel_scope.cancel()

@pytest.mark.asyncio
async def test_update_map(async_client, mocker):
    """Test with async mock"""
    mock_result = {"message": "Enrichment maps updated successfully"}
    mocker.patch(
        "app.main.auto_enrichment_obj.update_maps",
        new_callable=lambda: lambda *args, **kwargs: mock_result
    )
    
    response = await async_client.get("/update-map/appid_to_1")
    assert response.status_code == 200
    assert response.json() == mock_result

    # Force cleanup
    await async_client.aclose()