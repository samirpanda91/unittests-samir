import pytest
from unittest.mock import MagicMock
from your_module import Query

@pytest.fixture
def mock_session(mocker):
    """Mock the database session with necessary methods."""
    mock_session = MagicMock()
    mocker.patch.object(mock_session, "query", return_value=mock_session)
    mocker.patch.object(mock_session, "filter", return_value=mock_session)
    mocker.patch.object(mock_session, "all", return_value=[])
    mocker.patch.object(mock_session, "count", return_value=0)
    return mock_session

@pytest.fixture
def mock_info():
    """Fixture for a mocked Strawberry `info` object."""
    return MagicMock(context={"page": 1, "request": MagicMock(url="http://test.com?page=1")})

@pytest.mark.asyncio
async def test_get_incidents(mocker, mock_session, mock_info):
    """Test get_incidents function."""
    # Mock session and return values
    mocker.patch("your_module.Database.get_session", return_value=mock_session)
    mock_session.all.return_value = [
        MagicMock(incident_id=1, name="Incident 1", incidentStartTime="2025-01-01T12:00:00"),
        MagicMock(incident_id=2, name="Incident 2", incidentStartTime="2025-01-02T12:00:00"),
    ]
    mock_session.count.return_value = 15

    # Call the function
    query = Query()
    result = await query.get_incidents(mock_info, page=1, filters={})

    # Assertions
    assert result.page_info == "1 of 2"
    assert len(result.incident_data) == 2
    assert result.incident_data[0].name == "Incident 1"

@pytest.mark.asyncio
async def test_get_incident_count_by_source(mocker, mock_session, mock_info):
    """Test get_incident_count_by_source function."""
    mocker.patch("your_module.Database.get_session", return_value=mock_session)
    mock_session.all.return_value = [
        MagicMock(source="Service A", count=10),
        MagicMock(source="Service B", count=5),
    ]

    # Call the function
    query = Query()
    result = await query.get_incident_count_by_source(mock_info)

    # Assertions
    assert len(result) == 2
    assert result[0].source == "Service A"
    assert result[0].count == 10

@pytest.mark.asyncio
async def test_get_incident_count_by_event_name(mocker, mock_session, mock_info):
    """Test get_incident_count_by_event_name function."""
    mocker.patch("your_module.Database.get_session", return_value=mock_session)
    mock_session.all.return_value = [
        MagicMock(event_name="Event 1", count=7),
        MagicMock(event_name="Event 2", count=3),
    ]

    # Call the function
    query = Query()
    result = await query.get_incident_count_by_event_name(mock_info)

    # Assertions
    assert len(result) == 2
    assert result[0].event_name == "Event 1"
    assert result[0].count == 7

@pytest.mark.asyncio
async def test_get_incident_count_by_assignment_group(mocker, mock_session, mock_info):
    """Test get_incident_count_by_assignment_group function."""
    mocker.patch("your_module.Database.get_session", return_value=mock_session)
    mock_session.all.return_value = [
        MagicMock(assignment_group="Group A", count=8),
        MagicMock(assignment_group="Group B", count=4),
    ]

    # Call the function
    query = Query()
    result = await query.get_incident_count_by_assignment_group(mock_info)

    # Assertions
    assert len(result) == 2
    assert result[0].assignment_group == "Group A"
    assert result[0].count == 8

@pytest.mark.asyncio
async def test_get_incident_count_by_app_id(mocker, mock_session, mock_info):
    """Test get_incident_count_by_app_id function."""
    mocker.patch("your_module.Database.get_session", return_value=mock_session)
    mock_session.all.return_value = [
        MagicMock(app_id="App 1", count=12),
        MagicMock(app_id="App 2", count=6),
    ]

    # Call the function
    query = Query()
    result = await query.get_incident_count_by_app_id(mock_info)

    # Assertions
    assert len(result) == 2
    assert result[0].app_id == "App 1"
    assert result[0].count == 12

@pytest.mark.asyncio
async def test_get_incident_correlation(mocker, mock_session, mock_info):
    """Test get_incident_correlation function."""
    mocker.patch("your_module.Database.get_session", return_value=mock_session)
    mock_session.all.return_value = [
        MagicMock(correlation_key="Key 1", percentage=50),
        MagicMock(correlation_key="Key 2", percentage=30),
    ]

    # Call the function
    query = Query()
    result = await query.get_incident_correlation(mock_info)

    # Assertions
    assert len(result) == 2
    assert result[0].correlation_key == "Key 1"
    assert result[0].percentage == 50