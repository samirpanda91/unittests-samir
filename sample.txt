import unittest
from unittest.mock import MagicMock, patch

# Assuming mssql_connection and db_action are part of a module named 'database_module'
from database_module import mssql_connection, db_action

def test_action():
    conn = mssql_connection(_server, _user, _password, _database, port_port)
    action = db_action(
        name='query',
        sql=f'begin {_sql} set account on end',
        type='select',
        actionComplete=_action_handler
    )

    action.sql = "select app_manager from v_sn_applications where application_id='123'"

    conn.open()
    for _ in range(2):
        conn.execute_action(action)
    conn.close()

def _action_handler(action, *args, **kwargs):
    if len(action.data) > 0:
        print(action.data)
        assert True

class TestDatabaseActions(unittest.TestCase):
    @patch('database_module.mssql_connection')
    def test_action(self, mock_mssql_connection):
        # Mock the connection and its methods
        mock_conn = MagicMock()
        mock_mssql_connection.return_value = mock_conn

        # Mock the action and its data
        mock_action = MagicMock()
        mock_action.data = [{'app_manager': 'John Doe'}]  # Sample data

        # Call the function under test
        test_action()

        # Assertions to ensure the mocks were called as expected
        mock_conn.open.assert_called_once()
        self.assertEqual(mock_conn.execute_action.call_count, 2)
        mock_conn.close.assert_called_once()

if __name__ == "__main__":
    unittest.main()