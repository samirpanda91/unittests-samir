import React, { useState } from "react";
import {
  Container, TextField, Button, MenuItem, Select, FormControl, InputLabel,
  Typography, Card, CardContent, Box
} from "@mui/material";
import Grid2 from "@mui/material/Unstable_Grid2"; // Import Grid2
import api from "./api"; // Import Axios instance

const App = () => {
  // Initialize with default values
  const [alertThreshold, setAlertThreshold] = useState("10");
  const [nRecords, setNRecords] = useState("20");
  const [incidents, setIncidents] = useState([]);
  const [selectedIncident, setSelectedIncident] = useState("");
  const [alertDescriptions, setAlertDescriptions] = useState([]);

  // Fetch incidents from API
  const fetchIncidents = async () => {
    try {
      const response = await api.get("/ais/v1/incidents", {
        params: { alert_threshold: alertThreshold, n_records: nRecords }
      });
      console.log("API Response:", response.data); // Debug the response
      setIncidents(Array.isArray(response.data) ? response.data : []); // Ensure incidents is an array
    } catch (error) {
      console.error("Error fetching incidents:", error);
      setIncidents([]); // Set incidents to an empty array on error
    }
  };

  // Fetch incident details
  const summarizeIncident = async () => {
    if (!selectedIncident) return;
    try {
      const response = await api.get(`/ais/v1/incidents/${selectedIncident}/description`);
      setAlertDescriptions(response.data);
    } catch (error) {
      console.error("Error fetching incident description:", error);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 5 }}>
      <Typography variant="h4" textAlign="center" fontWeight="bold" color="primary" gutterBottom>
        Advanced Incident Summarization
      </Typography>

      <Card sx={{ boxShadow: 5, borderRadius: 3, backgroundColor: "#f4f6f8", p: 3 }}>
        <CardContent>
          {/* Input Fields and Get Incidents Button */}
          <Grid2 container spacing={2} justifyContent="center">
            <Grid2 xs={6}>
              <TextField
                label="alert_threshold"
                fullWidth
                variant="outlined"
                value={alertThreshold}
                onChange={(e) => setAlertThreshold(e.target.value)}
                sx={{ 
                  backgroundColor: "white", 
                  borderRadius: 1, 
                  mb: 2,
                  "& .MuiInputBase-root": { height: 40 } // Reduce height of text field
                }}
              />
            </Grid2>
            <Grid2 xs={6}>
              <TextField
                label="n_records"
                fullWidth
                variant="outlined"
                value={nRecords}
                onChange={(e) => setNRecords(e.target.value)}
                sx={{ 
                  backgroundColor: "white", 
                  borderRadius: 1, 
                  mb: 2,
                  "& .MuiInputBase-root": { height: 40 } // Reduce height of text field
                }}
              />
            </Grid2>
            <Grid2 xs={12} sx={{ textAlign: "center" }}>
              <Button
                variant="contained"
                color="secondary"
                onClick={fetchIncidents}
                sx={{ fontWeight: "bold", width: "50%", height: 40 }} // Set height of button
              >
                Get Incidents
              </Button>
            </Grid2>
          </Grid2>

          {/* Dropdown for Incidents */}
          <Grid2 container spacing={2} justifyContent="center" sx={{ mt: 2 }}>
            <Grid2 xs={8}>
              <FormControl fullWidth>
                <InputLabel>DD Incidents</InputLabel>
                <Select
                  value={selectedIncident || ""} // Fallback to empty string if undefined
                  onChange={(e) => setSelectedIncident(e.target.value.toString())} // Ensure value is a string
                  sx={{ 
                    backgroundColor: "white", 
                    borderRadius: 1,
                    "& .MuiInputBase-root": { height: 40 }, // Reduce height of dropdown
                    width: "100%" // Make dropdown wider
                  }}
                >
                  {Array.isArray(incidents) && incidents.map((incident) => (
                    <MenuItem key={incident.id} value={incident.id ? incident.id.toString() : ""}>
                      {`Incident ${incident.id} - ${incident.n_alerts} alerts`}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid2>
          </Grid2>

          {/* Summarize Button (Conditional) */}
          {selectedIncident && (
            <Grid2 container spacing={2} justifyContent="center" sx={{ mt: 2 }}>
              <Grid2 xs={8} sx={{ textAlign: "center" }}>
                <Button
                  variant="contained"
                  color="success"
                  onClick={summarizeIncident}
                  sx={{ fontWeight: "bold", width: "100%", height: 40 }} // Increase width and set height of button
                >
                  Summarize
                </Button>
              </Grid2>
            </Grid2>
          )}

          {/* Incident Details Section */}
          <Box mt={3} p={2} sx={{ backgroundColor: "#e3f2fd", borderRadius: 2 }}>
            <Typography variant="h6" fontWeight="bold" color="primary">
              Incident Details
            </Typography>
            {alertDescriptions.length > 0 ? (
              alertDescriptions.map((alert) => (
                <Typography key={alert.id} sx={{ mt: 1, fontSize: "1rem" }}>
                  <strong>ID:</strong> {alert.id} | <strong>Identifier:</strong> {alert.identifier} <br />
                  <strong>Description:</strong> {alert.description}
                </Typography>
              ))
            ) : (
              <Typography sx={{ mt: 1, fontStyle: "italic" }}>No details available</Typography>
            )}
          </Box>
        </CardContent>
      </Card>
    </Container>
  );
};

export default App;