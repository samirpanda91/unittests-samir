# tests/test_logger_config.py
import pytest
from unittest.mock import MagicMock, patch

def test_write_kafka_log_entry():
    # Import the function from its module.
    # This import must come before (or within) the patch context so that the patched names are used.
    from app.config.logger_config import write_kafka_log_entry

    # Patch the Log_entry and logger.log in app.config.logger_config.
    with patch("app.config.logger_config.Log_entry") as mock_log_entry, \
         patch("app.config.logger_config.logger.log") as mock_logger:
         
         # Create a dummy instance for Log_entry.
         dummy_instance = MagicMock()
         dummy_instance.get_log_message_json.return_value = '{"dummy": "json"}'
         dummy_instance.level = 1
         mock_log_entry.return_value = dummy_instance
         
         # Set the severity conversion mapping on the patched Log_entry.
         mock_log_entry.severity_conversion = {1: "INFO"}
         
         # Call the function under test.
         write_kafka_log_entry("Test message", level=1, error_number=1234)
         
         # Verify that Log_entry was instantiated once with the correct parameters.
         mock_log_entry.assert_called_once_with(
             message="Test message",
             level=1,
             catalog="bpan-autoenrichmentmaps",
             error_number="1234",           # Note: error_number is converted to string.
             message_vars=("Test message",),
             extra={"component": "emap-auto-enrichment-maps"}
         )
         
         # Verify that logger.log was called once with the expected log level and message.
         mock_logger.assert_called_once_with("INFO", '{"dummy": "json"}')