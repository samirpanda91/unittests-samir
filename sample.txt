import csv
import os
import gzip
import shutil
from concurrent.futures import ThreadPoolExecutor

# Configurable constants
INPUT_CSV = "large_file.csv"  # Path to your large CSV file
OUTPUT_DIR = "split_files"  # Directory to store the split files
LINES_PER_FILE = 20_000  # Number of lines per split file
ZIP_PARALLELISM = 4  # Number of threads for parallel zipping


def split_csv(input_csv, output_dir, lines_per_file):
    """Splits a large CSV file into smaller chunks."""
    os.makedirs(output_dir, exist_ok=True)
    
    with open(input_csv, mode="r", newline="", encoding="utf-8") as infile:
        reader = csv.reader(infile)
        header = next(reader)  # Read the header row
        
        file_index = 1
        output_file = None
        writer = None
        line_count = 0

        for row in reader:
            if line_count % lines_per_file == 0:
                if output_file:
                    output_file.close()
                
                chunk_filename = os.path.join(output_dir, f"chunk_{file_index}.csv")
                output_file = open(chunk_filename, mode="w", newline="", encoding="utf-8")
                writer = csv.writer(output_file)
                
                writer.writerow(header)  # Write header to new file
                file_index += 1

            writer.writerow(row)
            line_count += 1

        if output_file:
            output_file.close()

    return [os.path.join(output_dir, f) for f in os.listdir(output_dir) if f.endswith(".csv")]


def gzip_file(file_path):
    """Compresses a file using gzip."""
    gz_path = file_path + ".gz"
    with open(file_path, "rb") as f_in, gzip.open(gz_path, "wb") as f_out:
        shutil.copyfileobj(f_in, f_out)
    
    os.remove(file_path)  # Delete the original CSV file after compression
    return gz_path


def parallel_gzip(file_paths, num_threads=ZIP_PARALLELISM):
    """Compresses files in parallel."""
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        list(executor.map(gzip_file, file_paths))


if __name__ == "__main__":
    print("Splitting CSV...")
    split_files = split_csv(INPUT_CSV, OUTPUT_DIR, LINES_PER_FILE)
    
    print(f"Created {len(split_files)} chunk files. Compressing...")
    parallel_gzip(split_files)
    
    print("All files compressed successfully!")