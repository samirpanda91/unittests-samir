import pytest
from starlette.requests import Request
from starlette.authentication import AuthenticationError
from your_module import authenticate_token  # Update with the actual module name

class MockRequest:
    """Mock Request class to simulate FastAPI requests."""
    def __init__(self, headers=None):
        self.headers = headers or {}

@pytest.fixture
def auth_backend():
    return authenticate_token(token="valid_token")  # Use the expected token

def test_authenticate_valid_token(auth_backend):
    """Test authentication with a valid token."""
    request = MockRequest(headers={"authorization": "valid_token"})
    
    credentials, user = pytest.asyncio.run(auth_backend.authenticate(request))
    
    assert credentials.scopes == ["authenticated"]
    assert user.identity == "api_user"

def test_authenticate_invalid_token(auth_backend):
    """Test authentication with an invalid token."""
    request = MockRequest(headers={"authorization": "invalid_token"})
    
    with pytest.raises(AuthenticationError, match="Authentication Failed"):
        pytest.asyncio.run(auth_backend.authenticate(request))

def test_authenticate_missing_token(auth_backend):
    """Test authentication when authorization header is missing."""
    request = MockRequest(headers={})  # No authorization header
    
    with pytest.raises(AuthenticationError, match="Authentication Failed"):
        pytest.asyncio.run(auth_backend.authenticate(request))