import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime
from your_module import Query, BigPandaIncidentsView, BigPandaIncidentsBySource

@pytest.fixture
def mock_session():
    # Mock SQLAlchemy session
    session = MagicMock()
    session.query.return_value = session
    session.filter.return_value = session
    session.all.return_value = []
    session.count.return_value = 10
    return session

@pytest.fixture
def mock_info():
    # Mock Strawberry's `info` object
    return MagicMock(context={"page": 1, "request": MagicMock(url="http://test.com?page=1")})

@pytest.mark.asyncio
async def test_get_incidents(mock_session, mock_info):
    with patch("your_module.Database.get_session", return_value=mock_session), \
         patch("your_module.logger") as mock_logger:
        query = Query()
        result = await query.get_incidents(mock_info, page=1, filters={"incidentStartTime": "2025-01-01"})

        mock_logger.info.assert_called_with("Fetching data with filters:{'incidentStartTime': '2025-01-01'}")
        assert result.page_info == "1 of 1"
        assert result.incident_data == []

@pytest.mark.asyncio
async def test_get_incident_count_by_source(mock_session):
    with patch("your_module.Database.get_session", return_value=mock_session), \
         patch("your_module.logger") as mock_logger:
        mock_session.query().all.return_value = [
            MagicMock(entity_class="source1", count=5),
            MagicMock(entity_class="source2", count=10)
        ]
        query = Query()
        result = await query.get_incident_count_by_source()

        mock_logger.info.assert_called_with("Fetching alerts count by source")
        assert len(result) == 2
        assert result[0].entity_class == "source1"
        assert result[0].count == 5

@pytest.mark.asyncio
async def test_get_incident_count_by_assignment_group(mock_session):
    with patch("your_module.Database.get_session", return_value=mock_session), \
         patch("your_module.logger") as mock_logger:
        mock_session.query().all.return_value = [
            MagicMock(event_ticket="group1", count=8),
            MagicMock(event_ticket="group2", count=12)
        ]
        query = Query()
        result = await query.get_incident_count_by_assignment_group()

        mock_logger.info.assert_called_with("Fetching alerts count by assignment group")
        assert len(result) == 2
        assert result[0].event_ticket == "group1"
        assert result[0].count == 8

@pytest.mark.asyncio
async def test_get_incident_count_by_event_name(mock_session):
    with patch("your_module.Database.get_session", return_value=mock_session), \
         patch("your_module.logger") as mock_logger:
        mock_session.query().all.return_value = [
            MagicMock(event_name="event1", count=3),
            MagicMock(event_name="event2", count=7)
        ]
        query = Query()
        result = await query.get_incident_count_by_event_name()

        mock_logger.info.assert_called_with("Fetching alerts count by event name")
        assert len(result) == 2
        assert result[0].event_name == "event1"
        assert result[0].count == 3

@pytest.mark.asyncio
async def test_get_incident_count_by_app_id(mock_session):
    with patch("your_module.Database.get_session", return_value=mock_session), \
         patch("your_module.logger") as mock_logger:
        mock_session.query().all.return_value = [
            MagicMock(ci_wf_appid="app1", count=4),
            MagicMock(ci_wf_appid="app2", count=6)
        ]
        query = Query()
        result = await query.get_incident_count_by_app_id()

        mock_logger.info.assert_called_with("Fetching alerts count by app id")
        assert len(result) == 2
        assert result[0].ci_wf_appid == "app1"
        assert result[0].count == 4

@pytest.mark.asyncio
async def test_get_incident_correlation(mock_session):
    with patch("your_module.Database.get_session", return_value=mock_session), \
         patch("your_module.logger") as mock_logger:
        mock_session.query().one.return_value = MagicMock(
            distinct_incident_id_count=100,
            distinct_entity_id_count=50,
            correlation_percetage=2.0
        )
        query = Query()
        result = await query.get_incident_correlation()

        mock_logger.info.assert_called_with("Fetching alerts correlation percetnage")
        assert result.distinct_incident_id_count == 100
        assert result.distinct_entity_id_count == 50
        assert result.correlation_percetage == 2.0