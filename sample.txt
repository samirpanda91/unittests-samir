from unittest.mock import patch, MagicMock

@patch("Kafka_sync.kafka_sync.Aiops_config.get_instance")
@patch("Kafka_sync.kafka_sync.Kafka_Client")  # Mock Kafka Client
@patch("Kafka_sync.kafka_sync.Kafka_Writer")  # ✅ Mock Kafka Writer
def test_kafka_sync(mock_kafka_writer, mock_kafka_client, mock_get_instance, mock_aiops_config):
    """Test Kafka_sync initialization with mock SSL config."""
    
    # ✅ Mock Aiops_config.get_instance to return test config
    mock_get_instance.return_value = {
        "src": {
            "kafka_environment": "uat-consumer",
            "topics": ["test_topic"],
            "consumer_group": "test-group",
            "filters": {"key1": "value1"},
            "ssl.ca.location": "/path/to/fake_cert.pem"  # ✅ Mock SSL Path
        },
        "dest": {
            "kafka_environment": "sit-producer",
            "topics": ["test_topic"],
            "ssl.ca.location": "/path/to/fake_cert.pem"  # ✅ Mock SSL Path for producer
        }
    }

    # ✅ Mock Kafka Client
    mock_kafka_client.return_value = MagicMock()

    # ✅ Mock Kafka Writer and set expected attributes
    mock_kafka_writer.return_value = MagicMock()
    mock_kafka_writer.compression_types = ["none", "gzip", "snappy", "lz4"]  # ✅ Fix: Define valid compression types

    # ✅ Initialize Kafka_sync
    kafka_sync = Kafka_sync("tests/test_config.toml")

    # ✅ Ensure Kafka_Writer is called
    mock_kafka_writer.assert_called()

    # ✅ Print debug info
    print("Kafka Writer SSL Path:", mock_get_instance.return_value["src"]["ssl.ca.location"])