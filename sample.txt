import React, { useState } from "react";
import {
  Container, TextField, Button, Typography, Box, Paper, List, ListItem, ListItemText, ListItemButton, Checkbox,
  MenuItem, Select, FormControl, InputLabel
} from "@mui/material";

const App = () => {
  const [alertThreshold, setAlertThreshold] = useState("10");
  const [nRecords, setNRecords] = useState("20");
  const [incidents, setIncidents] = useState([]);
  const [selectedIncident, setSelectedIncident] = useState("");
  const [incidentDetails, setIncidentDetails] = useState([]);
  const [summary, setSummary] = useState(null);

  const fetchIncidents = async () => {
    try {
      const response = await api.get("/ais/v1/incidents", {
        params: { alert_threshold: alertThreshold, n_records: nRecords }
      });
      const fetchedIncidents = Array.isArray(response.data) ? response.data : [];
      setIncidents(fetchedIncidents);
    } catch (error) {
      console.error("Error fetching incidents:", error);
      setIncidents([]);
    }
  };

  const handleIncidentSelect = async (incidentId) => {
    setSelectedIncident(incidentId);
    try {
      const response = await api.get(`/ais/v1/incidents/${incidentId}/description`);
      setIncidentDetails(response.data);
    } catch (error) {
      console.error("Error fetching incident details:", error);
      setIncidentDetails([]);
    }
  };

  const summarizeIncident = async () => {
    if (!selectedIncident) return;
    try {
      const response = await api.get(`/ais/v1/incidents/${selectedIncident}/summarize`);
      setSummary(response.data);
    } catch (error) {
      console.error("Error summarizing incident:", error);
      setSummary(null);
    }
  };

  return (
    <Container maxWidth={false} sx={{ mt: 5, height: "100vh", width: "100%", p: 0 }}>
      <Typography variant="h4" textAlign="center" fontWeight="bold" color="primary" gutterBottom>
        Advanced Incident Summarization
      </Typography>

      <Box sx={{ display: "flex", height: "80vh", mt: 2, gap: 2 }}>
        {/* Left Panel */}
        <Paper elevation={3} sx={{ p: 3, flex: 1, display: "flex", flexDirection: "column", overflowY: "auto", width: "48%" }}>
          {/* Input Fields in One Line */}
          <Box sx={{ display: "flex", gap: 2, mb: 2 }}>
            <TextField
              label="alert_threshold"
              fullWidth
              variant="outlined"
              value={alertThreshold}
              onChange={(e) => setAlertThreshold(e.target.value)}
              sx={{ backgroundColor: "white", borderRadius: 1, "& .MuiInputBase-root": { height: 40 } }}
            />
            <TextField
              label="n_records"
              fullWidth
              variant="outlined"
              value={nRecords}
              onChange={(e) => setNRecords(e.target.value)}
              sx={{ backgroundColor: "white", borderRadius: 1, "& .MuiInputBase-root": { height: 40 } }}
            />
          </Box>

          {/* Get Incidents Button */}
          <Button
            variant="contained"
            color="secondary"
            onClick={fetchIncidents}
            sx={{ fontWeight: "bold", width: "100%", height: 40, mb: 2 }}
          >
            Get Incidents
          </Button>

          {/* Dropdown for Incidents */}
          <FormControl fullWidth sx={{ mb: 2 }}>
            <InputLabel shrink sx={{ backgroundColor: "white", px: 1 }}>
              DD Incidents
            </InputLabel>
            <Select
              value={selectedIncident || ""}
              onChange={(e) => handleIncidentSelect(e.target.value)}
              sx={{ backgroundColor: "white", borderRadius: 1, "& .MuiInputBase-root": { height: 40 } }}
              MenuProps={{ PaperProps: { sx: { maxHeight: 200, marginTop: 1 } } }}
            >
              {incidents.map((incident) => (
                <MenuItem key={incident.id} value={incident.id ? incident.id.toString() : ""}>
                  {`Incident ${incident.id} - ${incident.n_alerts} alerts`}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          {/* Incident Details List */}
          <Typography variant="h6" fontWeight="bold" color="primary" gutterBottom>
            Incident Details
          </Typography>
          <List sx={{ flex: 1, overflowY: "auto", pr: 2 }}>
            {incidentDetails.map((alert) => (
              <ListItem key={alert.id} disablePadding>
                <ListItemButton
                  selected={selectedIncident === alert.id.toString()}
                  onClick={() => setSelectedIncident(alert.id.toString())}
                  sx={{
                    backgroundColor: selectedIncident === alert.id.toString() ? "#e3f2fd" : "white",
                    borderRadius: 1,
                    mb: 1,
                    "&:hover": { backgroundColor: "#e3f2fd" },
                  }}
                >
                  <Checkbox
                    checked={selectedIncident === alert.id.toString()}
                    sx={{ p: 0, color: "#1976d2" }}
                  />
                  <ListItemText
                    primary={`Incident ID: ${alert.id}`}
                    secondary={
                      <>
                        <Typography variant="body2" color="text.secondary">
                          <strong>Identifier:</strong> {alert.identifier}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          <strong>Description:</strong> {alert.description}
                        </Typography>
                      </>
                    }
                  />
                </ListItemButton>
              </ListItem>
            ))}
          </List>

          {/* Summarize Button */}
          <Button
            variant="contained"
            color="success"
            onClick={summarizeIncident}
            sx={{ fontWeight: "bold", width: "100%", height: 40, mt: 2 }}
          >
            Summarize
          </Button>
        </Paper>

        {/* Right Panel: Summary */}
        <Paper elevation={3} sx={{ p: 3, flex: 1, display: "flex", flexDirection: "column", overflowY: "auto", width: "48%" }}>
          <Typography variant="h6" fontWeight="bold" color="primary" gutterBottom>
            Summary
          </Typography>
          <Box sx={{ flex: 1, overflowY: "auto", pr: 2 }}>
            {summary ? (
              <Box sx={{ backgroundColor: "white", borderRadius: 1, p: 2, mb: 2, boxShadow: 1 }}>
                <Typography variant="subtitle1" fontWeight="bold" color="text.primary">
                  Summary: {summary.summary}
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                  <strong>Key Points:</strong> {summary.keyPoints}
                </Typography>
              </Box>
            ) : (
              <Typography sx={{ mt: 1, fontStyle: "italic" }}>No summary available</Typography>
            )}
          </Box>
        </Paper>
      </Box>
    </Container>
  );
};

export default App;