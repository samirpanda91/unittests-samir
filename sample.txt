from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from app.service.token_validation import TokenManager

router = APIRouter()
token_mgr = TokenManager()
security = HTTPBearer()

@router.post("/auth/validate-token")
async def validate_token(
    authorization: HTTPAuthorizationCredentials = Depends(security)
):
    """
    API endpoint for Apigee to validate tokens.
    """
    try:
        valid_token = await token_mgr.verify_token(authorization=authorization)
        return {"message": "Token is valid", "token": valid_token}
    except HTTPException as e:
        raise e




from fastapi import Request, Header
import jwt

@app.post("/bpan/reporting")
async def post_graphql_fastapi(
    request: Request,
    query: GQLQuery,
    page: int = 1,
    authorization: str = Header(None)  # Extract token from headers
):
    """
    GraphQL Reporting API with Token Validation.
    """
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing or invalid token")

    token_credentials = HTTPAuthorizationCredentials(scheme="bearer", credentials=authorization.split(" ")[1])
    
    # Validate token using existing TokenManager
    user_token = await token_mgr.verify_token(authorization=token_credentials)

    return await graphql_app.execute_operation(
        request=request,
        root_value=None,
        context={"request": request, "page": page, "query": query, "user_token": user_token}
    )

