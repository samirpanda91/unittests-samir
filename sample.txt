import React, { useState } from "react";
import {
  Container, TextField, Button, MenuItem, Select, FormControl, InputLabel,
  Typography, Card, CardContent, Grid, Box
} from "@mui/material";
import api from "./api"; // Import Axios instance

const App = () => {
  const [alertThreshold, setAlertThreshold] = useState("");
  const [nRecords, setNRecords] = useState("");
  const [incidents, setIncidents] = useState([]);
  const [selectedIncident, setSelectedIncident] = useState("");
  const [alertDescriptions, setAlertDescriptions] = useState([]);

  // Fetch incidents from API
  const fetchIncidents = async () => {
    try {
      const response = await api.get("/v1/incidents", {
        params: { alert_threshold: alertThreshold, n_records: nRecords }
      });
      console.log("API Response:", response.data); // Debug the response
      setIncidents(Array.isArray(response.data) ? response.data : []); // Ensure incidents is an array
    } catch (error) {
      console.error("Error fetching incidents:", error);
      setIncidents([]); // Set incidents to an empty array on error
    }
  };

  // Fetch incident details
  const summarizeIncident = async () => {
    if (!selectedIncident) return;
    try {
      const response = await api.get(`/v1/incidents/${selectedIncident}/description`);
      setAlertDescriptions(response.data);
    } catch (error) {
      console.error("Error fetching incident description:", error);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 5 }}>
      <Typography variant="h4" textAlign="center" fontWeight="bold" color="primary" gutterBottom>
        Advanced Incident Summarization
      </Typography>

      <Card sx={{ boxShadow: 5, borderRadius: 3, backgroundColor: "#f4f6f8", p: 3 }}>
        <CardContent>
          <Grid container spacing={4}>
            {/* Left Side: Query Parameters and Dropdown */}
            <Grid item xs={6}>
              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <TextField
                    label="alert_threshold"
                    fullWidth
                    variant="outlined"
                    value={alertThreshold}
                    onChange={(e) => setAlertThreshold(e.target.value)}
                    sx={{ backgroundColor: "white", borderRadius: 1 }}
                  />
                </Grid>
                <Grid item xs={6}>
                  <TextField
                    label="n_records"
                    fullWidth
                    variant="outlined"
                    value={nRecords}
                    onChange={(e) => setNRecords(e.target.value)}
                    sx={{ backgroundColor: "white", borderRadius: 1 }}
                  />
                </Grid>
                <Grid item xs={12}>
                  <Button
                    fullWidth
                    variant="contained"
                    color="secondary"
                    onClick={fetchIncidents}
                    sx={{ height: "100%", fontWeight: "bold" }}
                  >
                    Get Incidents
                  </Button>
                </Grid>
                <Grid item xs={12}>
                  <FormControl fullWidth>
                    <InputLabel>DD Incidents</InputLabel>
                    <Select
                      value={selectedIncident || ""} // Fallback to empty string if undefined
                      onChange={(e) => setSelectedIncident(e.target.value.toString())} // Ensure value is a string
                      sx={{ backgroundColor: "white", borderRadius: 1 }}
                    >
                      {Array.isArray(incidents) && incidents.map((incident) => (
                        <MenuItem key={incident.incident_id} value={incident.incident_id ? incident.incident_id.toString() : ""}>
                          {`Incident ${incident.incident_id} - ${incident.n_alerts} alerts`}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            </Grid>

            {/* Right Side: Summarize Button and Incident Details */}
            <Grid item xs={6}>
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <Button
                    fullWidth
                    variant="contained"
                    color="success"
                    onClick={summarizeIncident}
                    sx={{ height: "100%", fontWeight: "bold" }}
                  >
                    Summarize
                  </Button>
                </Grid>
                <Grid item xs={12}>
                  <Box mt={3} p={2} sx={{ backgroundColor: "#e3f2fd", borderRadius: 2 }}>
                    <Typography variant="h6" fontWeight="bold" color="primary">
                      Incident Details
                    </Typography>
                    {alertDescriptions.length > 0 ? (
                      alertDescriptions.map((alert, index) => (
                        <Typography key={index} sx={{ mt: 1, fontSize: "1rem" }}>
                          <strong>ID:</strong> {alert.id} | <strong>Identifier:</strong> {alert.identifier} <br />
                          <strong>Description:</strong> {alert.description}
                        </Typography>
                      ))
                    ) : (
                      <Typography sx={{ mt: 1, fontStyle: "italic" }}>No details available</Typography>
                    )}
                  </Box>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </CardContent>
      </Card>
    </Container>
  );
};

export default App;