import pytest
import json
from purl import Purl

@pytest.fixture
def purl_instance():
    """Fixture to create a Purl instance for tests."""
    return Purl("http://example.com", "GET")

def test_initialization_valid_request():
    """Test valid initialization of Purl."""
    p = Purl("http://example.com", "POST")
    assert p._url1 == "http://example.com"
    assert p._request_type == "POST"

def test_initialization_invalid_request():
    """Test initialization with an invalid request type."""
    with pytest.raises(Exception, match="Valid Request types are"):
        Purl("http://example.com", "INVALID")

def test_add_json_header(purl_instance):
    """Test adding JSON headers."""
    purl_instance.Add_JSON_header()
    assert "Content-Type" in purl_instance._headers
    assert purl_instance._headers["Content-Type"] == "application/json"

def test_init_request_params(purl_instance):
    """Test initializing request parameters."""
    purl_instance._initRequestParams()
    assert "verify" in purl_instance._request_params
    assert purl_instance._request_params["verify"] is False

def test_pretty_json(purl_instance):
    """Test Pretty_JSON method."""
    assert purl_instance._pretty is False
    purl_instance.Pretty_JSON(True)
    assert purl_instance._pretty is True

def test_add_json_post_data(purl_instance):
    """Test adding JSON post data."""
    json_data = '{"key": "value"}'
    purl_instance.Add_JSON_Post_Data(json_data)
    assert purl_instance._json_post_data == json.loads(json_data)

def test_add_post_data(purl_instance):
    """Test adding post data as dictionary."""
    data = {"key": "value"}
    purl_instance.Add_Post_Data(data)
    assert purl_instance._json_post_data == data

def test_read_json_post_data_file(mocker, purl_instance):
    """Test reading JSON data from a file."""
    mock_data = '{"name": "test"}'
    mock_open = mocker.patch("builtins.open", mocker.mock_open(read_data=mock_data))
    
    purl_instance.Read_JSON_Post_Data_File("dummy.json")
    
    mock_open.assert_called_once_with("dummy.json")
    assert purl_instance._json_post_data == json.loads(mock_data)

def test_add_user(purl_instance):
    """Test adding user credentials."""
    purl_instance.Add_user("admin:password")
    assert purl_instance._creds == ["admin", "password"]